<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Repositories\Abstract\I%MODEL_NAME%Repository;
use Illuminate\Http\Request;

class Api%MODEL_NAME%Controller extends Controller
{
    protected I%MODEL_NAME%Repository $%MODEL_NAME_CAMEL_CASE%Repository;

    public function __construct(I%MODEL_NAME%Repository $%MODEL_NAME_CAMEL_CASE%Repository)
    {
        $this->%MODEL_NAME_CAMEL_CASE%Repository = $%MODEL_NAME_CAMEL_CASE%Repository;
    }

    public function index()
    {
        $%MODEL_NAME_CAMEL_CASE%s = $this->%MODEL_NAME_CAMEL_CASE%Repository->get_all();

        return response()->json($%MODEL_NAME_CAMEL_CASE%s);
    }

    public function store(Request $request)
    {
        $response = $this->%MODEL_NAME_CAMEL_CASE%Repository->store($request);

        if (!$response)
            return response()->json('%MODEL_NAME% not created', 500);

        return response()->json($response);
    }

    public function update(Request $request)
    {
        $response = $this->%MODEL_NAME_CAMEL_CASE%Repository->update($request);

        if ($response === 'none')
            return response()->json('%MODEL_NAME% not found', 404);

        if (!$response)
            return response()->json('%MODEL_NAME% not updated', 500);

        return response()->json($response);
    }

    public function destroy(Request $request)
    {
        $response = $this->%MODEL_NAME_CAMEL_CASE%Repository->delete($request);

        if ($response === 'none')
            return response()->json('%MODEL_NAME% not found', 404);

        if (!$response)
            return response()->json('%MODEL_NAME% not updated', 500);

        return response()->json('%MODEL_NAME% deleted');
    }

    public function show(Request $request)
    {
        $response = $this->%MODEL_NAME_CAMEL_CASE%Repository->get($request);

        if ($response === 'none')
            return response()->json('%MODEL_NAME% not found', 404);

        return response()->json($response);
    }
}
