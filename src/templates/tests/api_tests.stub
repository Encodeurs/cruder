<?php

namespace %TEST_NAMESPACE%;

use %MODEL_NAMESPACE%\%MODEL_NAME%;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class API%MODEL_NAME%Test extends TestCase
{
    use RefreshDatabase;

    /**
     * Index Test
     * Create 5 record and get them.
     * 
     * @return void
     */
    public function test_index()
    {
        // 5 record added to database
        %MODEL_NAME%::factory()->count(5)->create();

        $response = $this->get('api/%MODEL_NAME_SNAKE_CASE%s');

        $response->assertJsonCount(5, 'data');
        $response->assertStatus(200);
    }

    /**
     * Store Test
     * Make a template and call create api with this data.
     * 
     * @return void
     */
    public function test_store()
    {
        // create a record template and get attributes
        $%MODEL_NAME_CAMEL_CASE% = %MODEL_NAME%::factory()->make()->getAttributes();

        $response = $this->postJson('api/%MODEL_NAME_SNAKE_CASE%s', $%MODEL_NAME_CAMEL_CASE%);

        $response->assertStatus(200);
        $response->assertJson([
            %ASSERT_FIELDS%    
        ]);

        // assert database with will create data.
        $this->assertDatabaseHas('%TABLE_NAME%', $%MODEL_NAME_CAMEL_CASE%);
    }

    /**
     * Update Test
     * Create a record. After create new template, then call update api. 
     * 
     * @return void
     */
    public function test_update()
    {
        // add a record
        $%MODEL_NAME_CAMEL_CASE% = %MODEL_NAME%::factory()->create();

        // create new record template 
        $new%MODEL_NAME% = %MODEL_NAME%::factory()->make()->getAttributes();

        $response = $this->putJson('api/%MODEL_NAME_SNAKE_CASE%s/' . $%MODEL_NAME_CAMEL_CASE%->id, $new%MODEL_NAME%);

        $response->assertStatus(200);
        $response->assertJson([
            'id' => $%MODEL_NAME_CAMEL_CASE%->id,
            %UPDATE_ASSERT_FIELDS%
        ]);

        // assert database with will create data.
        $this->assertDatabaseHas('%TABLE_NAME%', $new%MODEL_NAME%);
    }


    /**
     * Destroy Test
     * Create a record. Call delete request.
     * 
     * @return void
     */
    public function test_destroy()
    {
        // add a record
        $%MODEL_NAME_CAMEL_CASE% = %MODEL_NAME%::factory()->create();

        $response = $this->delete('api/%MODEL_NAME_SNAKE_CASE%s/' . $%MODEL_NAME_CAMEL_CASE%->id);

        $response->assertStatus(200);

        // assert database with will create data.
        %ASSERT_DELETED%
    }

    /**
     * Show Test
     * Create a record and get this data with Api.
     * 
     * @return void
     */
    public function test_show()
    {
        // 5 record added to database
        $%MODEL_NAME_CAMEL_CASE% = %MODEL_NAME%::factory()->create();

        $response = $this->get('api/%MODEL_NAME_SNAKE_CASE%s/' . $%MODEL_NAME_CAMEL_CASE%->id);

        $response->assertJson([
            'id' => $%MODEL_NAME_CAMEL_CASE%->id,
            %ASSERT_FIELDS%
        ]);
        $response->assertStatus(200);
    }
}
